#!/bin/bash

# Detect if running on macOS
IS_MACOS=$(uname | grep -i "darwin" > /dev/null && echo "true" || echo "false")

# Function to display usage guide
function usage() {
    echo "Marcus Alias  Command Manager"
    echo "Usage: $0 [OPTIONS] or directly input a Bash command"
    echo "Options:"
    echo "  -a, --add FILE          Create a file"
    echo "  -mv, --move SRC DST     Move a file or folder"
    echo "  -s, --show              List existing files and directories"
    echo "  -c, --create DIR        Create a folder"
    echo "  -nv, --navigate DIR     Navigate to a folder"
    echo "  -cp, --copy SRC DST     Copy file or folder"
    echo "  -d, --delete FILE       Delete a file"
    echo "  -D, --Delete DIR        Delete a folder"
    echo "  -rn, --rename SRC DST   Rename a file or folder"
    echo "  -v, --view FILE         View file contents"
    echo "  -dst, --destination     Show current working directory"
    echo "  -z, --zip DIR NAME      Zip a folder"
    echo "  -unz, --unzip FILE      Unzip a folder.zip"
    echo "  -b, --back              Go back (cd ..)"
    echo "  -cmd, --command 'CMD'   Execute any Bash command"
    echo "  -i, --interactive       Enter interactive mode (type commands live)"
    exit 1
}

# Function to execute a command and display status
run_command() {
    if eval "$1"; then
        echo "âœ” Command executed successfully"
    else
        echo "âœ˜ Error executing command: $1"
    fi
}

# Interactive mode: keep executing commands until exit
interactive_mode() {
    echo "ðŸ’» Entering Interactive Mode (type 'exit' to quit)"
    while true; do
        read -rp "Marcus$ " user_cmd
        [[ "$user_cmd" == "exit" ]] && break
        eval "$user_cmd"
    done
}

# Parse arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        -a|--add)
            run_command "touch '$2'"
            shift 2
            ;;
        -mv|--move)
            run_command "mv '$2' '$3'"
            shift 3
            ;;
        -s|--show)
            run_command "ls -l"
            shift
            ;;
        -c|--create)
            run_command "mkdir -p '$2'"
            shift 2
            ;;
        -nv|--navigate)
            if [[ -d "$2" ]]; then
                cd "$2" || exit
                echo "âœ” Navigated to '$2'"
            else
                echo "âœ˜ Error: '$2' is not a valid directory"
            fi
            shift 2
            ;;
        -cp|--copy)
            run_command "cp -r '$2' '$3'"
            shift 3
            ;;
        -d|--delete)
            run_command "rm -f '$2'"
            shift 2
            ;;
        -D|--Delete)
            run_command "rm -rf '$2'"
            shift 2
            ;;
        -rn|--rename)
            run_command "mv '$2' '$3'"
            shift 3
            ;;
        -v|--view)
            run_command "cat '$2'"
            shift 2
            ;;
        -dst|--destination)
            run_command "pwd"
            shift
            ;;
        -z|--zip)
            run_command "zip -r '$3.zip' '$2'"
            shift 3
            ;;
        -unz|--unzip)
            run_command "unzip '$2'"
            shift 2
            ;;
        -b|--back)
            cd .. || exit
            echo "âœ” Moved one directory back"
            shift
            ;;
        -cmd|--command)
            run_command "$2"
            shift 2
            ;;
        -i|--interactive)
            interactive_mode
            exit
            ;;
        *)
            echo "âœ˜ Unknown option: $1"
            usage
            ;;
    esac
done
